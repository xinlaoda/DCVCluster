AWSTemplateFormatVersion: 2010-09-09
Description: DCV Cluster v1.0

Parameters:
  VPCName:
    Description: The name of the VPC being created.
    Type: String
    Default: "DCVCluster"
  KeyPair:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: KeyPair for EC2 Instance

Outputs:
  DCVClusterStackName:
    Value: !Ref "AWS::StackName"
    Export:
      Name: "DCVClusterStackName"
  DCVKeyPair:
    Value: !Ref KeyPair
  Private0SubnetId:
    Value: !Ref Private0
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", Private0SubnetId ] ]
  Private1SubnetId:
    Value: !Ref Private1
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", Private1SubnetId ] ]
  Public0SubnetId:
    Value: !Ref Public0
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", Public0SubnetId ] ]
  Public1SubnetId:
    Value: !Ref Public1
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", Public1SubnetId ] ]
  VPCId:
    Value: !Ref VPC
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", VPC ] ]
  ALBDNSName:
    Value: !GetAtt DCVElasticLoadBalancer.DNSName
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", ALBDNSName ] ]
  ALB:
    Value: !Ref DCVElasticLoadBalancer
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", ALB ] ]
  DefaultTargetGroup:
    Value: !Ref DefaultTargetGroup
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", DefaultTargetGroup ] ]
  DCVEC2SG:
    Value: !Ref DCVEC2SG
  DCVDynamoDBTable:
    Value: !Ref DCVDynamoDBTable
  DCVApiGW:
    Value: !Ref DCVApiGW
  DCVApiGWResource:
    Value: !Ref DCVApiGWResource

Mappings:
  SubnetConfig:
    VPC:
      CIDR: "10.0.0.0/16"
    Public0:
      CIDR: "10.0.0.0/24"
    Public1:
      CIDR: "10.0.1.0/24"
    Private0:
      CIDR: "10.0.10.0/24"
    Private1:
      CIDR: "10.0.11.0/24"
  AZRegions:
    cn-northwest-1:
      AZs: ["a", "b"]
    cn-north-1:
      AZs: ["a", "b"]
  

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "VPC"
          - "CIDR"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref 'VPCName'
        - Key: "Application"
          Value: !Ref 'AWS::StackName'
  DefaultRouteOnPublic:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTablePublic
    Type: 'AWS::EC2::Route'
  InternetGateway:
    Properties:
      Tags:
        - Key: Name
          Value: DCVClusterIG
        - Key: Stack
          Value: !Ref 'AWS::StackId'
    Type: 'AWS::EC2::InternetGateway'
  NatEIPPublic:
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: DCVClusterEIP
    Type: 'AWS::EC2::EIP'
  NatGatewayPublic:
    Properties:
      AllocationId: !GetAtt 
        - NatEIPPublic
        - AllocationId
      SubnetId: !Ref Public0
    Type: 'AWS::EC2::NatGateway'
  NatRoutePrivate:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayPublic
      RouteTableId: !Ref RouteTablePrivate
    Type: 'AWS::EC2::Route'
  Private0:
    Properties:
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Private0"
          - "CIDR"
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      Tags:
        - Key: "Application"
          Value: !Ref "AWS::StackName"
        - Key: "Network"
          Value: "Private"
        - Key: "Name"
          Value: !Join
            - ''
            - - !Ref "VPCName"
              - '-private-'
              - !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      VpcId: !Ref VPC
    Type: 'AWS::EC2::Subnet'
  Private1:
    Properties:
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Private1"
          - "CIDR"
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      Tags:
        - Key: "Application"
          Value: !Ref "AWS::StackName"
        - Key: "Network"
          Value: "Private"
        - Key: "Name"
          Value: !Join
            - ''
            - - !Ref "VPCName"
              - '-private-'
              - !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      VpcId: !Ref VPC
    Type: 'AWS::EC2::Subnet'
  Public0:
    Properties:
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Public0"
          - "CIDR"
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      Tags:
        - Key: "Application"
          Value: !Ref "AWS::StackName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value: !Join
            - ''
            - - !Ref "VPCName"
              - '-public-'
              - !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      VpcId: !Ref VPC
    Type: 'AWS::EC2::Subnet'
  Public1:
    Properties:
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Public1"
          - "CIDR"
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      Tags:
        - Key: "Application"
          Value: !Ref "AWS::StackName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value: !Join
            - ''
            - - !Ref "VPCName"
              - '-public-'
              - !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      VpcId: !Ref VPC
    Type: 'AWS::EC2::Subnet'
  RouteAssociationPrivate0:
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref Private0
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
  RouteAssociationPrivate1:
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref Private1
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
  RouteAssociationPublic0:
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref Public0
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
  RouteAssociationPublic1:
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref Public1
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
  RouteTablePrivate:
    Properties:
      Tags:
        - Key: Name
          Value: DCVClusterRouteTablePrivate
        - Key: Stack
          Value: !Ref 'AWS::StackId'
      VpcId: !Ref VPC
    Type: 'AWS::EC2::RouteTable'
  RouteTablePublic:
    Properties:
      Tags:
        - Key: Name
          Value: DCVClusterRouteTablePublic
        - Key: Stack
          Value: !Ref 'AWS::StackId'
      VpcId: !Ref VPC
    Type: 'AWS::EC2::RouteTable'
  VPCGatewayAttachment:
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
    Type: 'AWS::EC2::VPCGatewayAttachment'

### DCV ALB ###
  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: SG for DCV ALB
      GroupName: ALBSG
      SecurityGroupIngress: 
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 8443
          ToPort: 8443
      Tags: 
        - Key: Name
          Value: DCVALBSG
        - Key: Stack
          Value: !Ref 'AWS::StackId'
      VpcId: !Ref VPC
  DCVElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: DCV-ALB
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref ALBSG
      Subnets: 
        - !Ref Public0
        - !Ref Public1
      Tags: 
        - Key: Name
          Value: DCVClusterALB
        - Key: Stack
          Value: !Ref 'AWS::StackId'
      Type: application
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      Name: DefaultDCVTargets
      Port: 8443
      Protocol: HTTPS
      VpcId: !Ref VPC

### create API Gateway
  DCVApiGW:
    Type: AWS::ApiGateway::RestApi
    Properties: 
      Description: "Invoke Lambda function to create DCV session."
      Name: DCVCluster
      EndpointConfiguration:
        Types:
          - REGIONAL
  DCVApiGWResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref DCVApiGW
      ParentId: !GetAtt 
        - DCVApiGW
        - RootResourceId
      PathPart: "dcv"
  
### DCV SG, access from ALB
  DCVEC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: SG for DCV EC2
      GroupName: DCVEC2SG
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          SourceSecurityGroupId:
            Fn::GetAtt:
            - ALBSG
            - GroupId
      Tags: 
        - Key: Name
          Value: DCVEC2SG
        - Key: Stack
          Value: !Ref 'AWS::StackId'
      VpcId: !Ref VPC
### DynamoDB
  DCVDynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "User"
          AttributeType: "S"
        - 
          AttributeName: "Id"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "User"
          KeyType: "HASH"
        - 
          AttributeName: "Id"
          KeyType: "RANGE"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "DCVClusterTable"
      
         
        

